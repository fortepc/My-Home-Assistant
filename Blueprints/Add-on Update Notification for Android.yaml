blueprint:
  name: HA Addon Update Notification for Android
  description: Send a notification when there's an update availiable for your one of HA Addons. You will may need to go you your [devices list](https://my.home-assistant.io/redirect/devices/) and enable the sensors for the addon(s) you want an update notifier for.
  domain: automation
  input:
    addon:
      name: Add-on Name
      description: "The name of the Add-on as we're going to use it in the Notification?"
    updater:
      name: Update Sensor
      description: "The binary sensor which indicates if there's an update available"
      selector:
        entity:
          domain: binary_sensor
    version_sensor:
      name: Version Sensor
      description: "The binary sensor which indicates if there's an update available"
      default: sensor.file_editor_version
      selector:
        entity:
          domain: sensor
    newest_version_sensor:
      name: New Version Sensor
      description: "This is the sensor that tells you what the available version is"
      default: sensor.file_editor_newest_version
      selector:
        entity:
          domain: binary_sensor
    notify_device:
      name: Device to notify
      description:
        Device needs to run the full official Home Assistant app to receive
        notifications
      selector:
        device:
          integration: mobile_app
    notification_title:
      name: Notification title
      description: 'What would you like to appear as the title of the notification on your device? If you put "{{ newest_version }}" in your message it will be replaced with the actual version number in your notification'
      default: Update Time!
    notification_message:
      name: Notification message
      description: 'What would you like the message in your notification to be? If you put "{{ newest_version }}" in your message it will be replaced with the actual version number in your notification'
      default: {{ addon }} {{ newest_version }} is available
    category:
      name: Notification Category
      description: "Devices running Android 8.0+ are able to create and manage notification channels on the fly. Once a channel is created you can navigate to your notification settings and you will find the newly created channel, from there you can customize the behavior (like notication sounds, etc) based on what your device allows."
      default: {{ addon}} Updates
    color:
      name: Notification Color
      description: "You can set the color of the notification, you can use either the color name or the hex code."
      default: homeassistant
    importance:
      name: Notification importance
      description:
        When you are setting the channel for your notification you also
        have the option to set the importance for the channel per notification. Possible
        values for this property are high, low, max, min and default.
      default: default
    group:
      name: Notification Group
      description:
        Setting a notifiction group will group it with other notifications
        of the same group. Useful to be able to group other update notifications together.
      default: Available Updates
    delay:
      name: Delay
      description: Wait before sending the notification
      default:
      selector:
        number:
          min: 0.0
          max: 60.0
          unit_of_measurement: seconds
          mode: slider
          step: 1.0
    clickAction:
      name: Click Action
      description: "Clicking on the notification takes you where?"
      default: "https://my.home-assistant.io/redirect/supervisor/"
    replace:
      name: Replacing Notif
      description: "If this automation triggers more than once should we replace the existing notification for this add-on? Otherwise we'll just send a brand new one"
      selector:
        boolean: {}
      default: false
#    persistent: #Leaving Off because I'm not sure how to have a wat to remove the notif after I've made it persistent without requiring a seperate blueprint for that.
#      name: Make Notification Persistent
#      description: 'Persistent Notifications can't be swiped away'
#      selector:
#        boolean: {}
#      default: false
    sticky:
      name: Make Notification Sticky
      description: "Sticky Notifications don't automatically dismiss themselves when you click them"
      selector:
        boolean: {}
      default: false

trigger:
  platform: state
  entity_id: !input "updater"
  to: "on"
  for: !input "delay"

mode: restart
max_exceeded: silent

variables:
  updater: !input "updater"
  version_sensor: !input "version"
  version: "{{ states[version_sensor] }}"
  newest_version_sensor: !input "newest_version"
  newest_version: "{{ states[newest_version_sensor] }}"
  release_notes: "{{ states[updater].attributes.release_notes }}"
  include_release_notes: !input "include_release_notes"
  include_hasspodcast: !input "include_hasspodcast"
  color: !input "color"
  category: !input "category"
  group: !input "group"
  importance: !input "importance"
  notify_device: !input "notify_device"
  notification_title: !input notification_title
  notification_message: !input notification_message
  clickAction: !input "clickAction"

action:
  # Send actionable notification
  - domain: mobile_app
    type: notify
    device_id: !input notify_device
    title: "{{ notification_title }}"
    message: "{{ notification_message }}"
    data:
      persistent: "{{ persistent_notification }}"
      color: "{{ color }}"
      channel: "{{ category }}"
      group: "{{ group }}"
      importance: "{{ importance }}"
      clickAction: "{{ clickAction }}"
      actions: >
        {% set titles = [action_1_title, action_2_title, action_3_title] %}
        {% set uris = [action_1_uri, action_2_uri, action_3_uri] %}
        {% set actions = namespace(data = []) %}
        {% for title in titles %}
          {% if title|length %}
            {% set uri = uris[loop.index - 1] %}
            {% set action_name = "action" + loop.index|string %}
            {% set action = {
              "action": "URI" if uri|length else action_name,
              "title": title,
              "uri": uri 
              }
            %}
            {% set actions.data = actions.data + [action] %}
          {% endif %}
        {% endfor %}
        {{ actions.data }}
